#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_GOOGLE_include_directive : enable

layout(binding = 1, rgba8) uniform writeonly image2D resultImage;

#include "common.h"

#define RAY_SAMPLES_PER_PIXEL 15
#define RAY_BOUNCE 20
#define SPHERE_COUNT 4

#define MAT_LAMBERT 1
#define MAT_METAL 2
#define MAT_DIELECTRIC 3

vec3 g_rand;
 
Lambertian lambertMatArray[2] = Lambertian[2](
     Lambertian(vec3(0.8, 0.3, 0.3))     //diffusePink
    ,Lambertian(vec3(0.8, 0.8, 0.0))     //diffuseYellow
);

Metal metalMatArray[2] = Metal[2](
     Metal( 0.0, vec3(0.8, 0.6, 0.2))   //metalReddish
    ,Metal( 0.3, vec3(0.2, 0.2, 0.2))   //metalGrey
);

Dielectric dielectricMatArray[2] = Dielectric[2](
     Dielectric( 1.0 )
     ,Dielectric( 1.5 )
);

Sphere sphereArray[SPHERE_COUNT] = Sphere[SPHERE_COUNT](
    Sphere(0.5, vec3(0.0, 0.0, -1.0), MAT_LAMBERT, 0)
    ,Sphere(100.0, vec3(0.0, -100.5, -1.0), MAT_LAMBERT, 1)
    ,Sphere(0.5, vec3(1.0, 0.0, -1.0), MAT_METAL, 0)
    ,Sphere(0.5, vec3(-1.0, 0.0, -1.0), MAT_DIELECTRIC, 1)
    //,Sphere(-0.45, vec3(-1.0, 0.0, -1.0), MAT_DIELECTRIC, 1)
);

// Computes the Primary Ray direction
Ray GetPrimaryRay(in vec2 uv)
{
	const float aspectRatio = 0.5; // width by height
	const vec3 CameraLookFrom = vec3(g_Info.cameraLookFromX, g_Info.cameraLookFromY, g_Info.cameraLookFromZ);
	const vec3 CameraHorizontal = (vec3(4, 0.0, 0.0));
	const vec3 CameraVertical =	(vec3(0.0, -2, 0.0));
	const vec3 CameralowerLeft = CameraLookFrom - CameraHorizontal/2.0 - CameraVertical/2.0 - vec3(0.0, 0.0, 1.0);    

	Ray primary;
	primary.origin = CameraLookFrom;
	primary.direction = normalize(CameralowerLeft + (uv.x*CameraHorizontal) + (uv.y*CameraVertical) - primary.origin);
    
	return primary;
}

int RaySphereHit(in Sphere sphere, in Ray ray, in float tMin, in float tMax, inout HitRecord hitRecord)
{
	vec3 oc = ray.origin - sphere.center;
    float a = dot(ray.direction, ray.direction);
    float b = dot(ray.direction, oc) * 2.0;
    float c = dot(oc, oc) - (sphere.radius * sphere.radius);
    float det = b * b - 4.0f * a * c;
    if (det < 0)
    {
        return 0;
    }

    float t1 = (-b - sqrt(det)) / (2.0 * a);
    float t2 = (-b + sqrt(det)) / (2.0 * a);
    if (t1 > tMin && t1 < tMax)
    {
        hitRecord.rayLength = t1;
    }
    else if (t2 > tMin && t2 < tMax)
    {
        hitRecord.rayLength = t2;
    }
    else
    {
        return 0;
    }
	
    // Recording hit point
    hitRecord.hitPoint = ray.origin + ((hitRecord.rayLength) * ray.direction);

    // substracting Hit point with Sphere center to get the normal at hitpoint
    // normalize because it is a direction
    hitRecord.normal = (hitRecord.hitPoint - sphere.center)/sphere.radius;

    hitRecord.mat_type = sphere.mat_type;
    hitRecord.mat_index = sphere.mat_index;

	return 1;
}

vec3 SampleSky(in Ray ray)
{
	const float t = 0.5f * (ray.direction.y + 1.0);
    return (1.0f - t) * vec3(1.0, 1.0, 1.0) + t * vec3(0.5f, 0.7f, 1.0f);
}

float Schlick(float cosine, float refIndex)
{
    float r0 = (1.0 - refIndex) / (1.0 + refIndex);
    r0 = r0 * r0;
    return r0 + (1.0 - r0) * pow((1.0 - cosine), 5);
}

bool Refract(vec3 incident,
        const vec3 normal,
        float ni,
        float nt,
        out vec3 reftacted)
{
    float ni_over_nt = (ni / nt);
    vec3 unit_Incident = normalize(incident);
    float incident_dot_normal = dot(unit_Incident, normal);
    float d = 1.0 - ni_over_nt * ni_over_nt * (1.0 - incident_dot_normal * incident_dot_normal);
    if (d > 0.0)
    {
        reftacted = ni_over_nt * (unit_Incident - normal * incident_dot_normal) - normal * sqrt(d);
        return true;
    }
    return false;
}

void Dielectric_scatter(in uvec2 xy, in float refraction_index, in Ray ray, in HitRecord hitRecord, out Ray scatter)
{
    //attenuation = nm::float3(1.0f, 1.0f, 1.0f);
    vec3 refracted_dir;// = vec3(0.0, 0.0, 0.0);
    bool isRefracted = false;
    vec3 n = hitRecord.normal;
    vec3 i = ray.direction;
    float reflectionProbability = 1.0f;
    float cosine = 0.0f;
    float idotn = dot(i, hitRecord.normal);

    // ie: the angle between incident ray and normal is less than 90
    // And meaning the refracted ray is leaving the dielectric medium
    if (dot(i, n) > 0.0)
    {
        refracted_dir = refract(i, -n, refraction_index);
        //isRefracted = Refract(i, -n, refraction_index, 1.0, refracted_dir);
        cosine = refraction_index * (idotn) / length(ray.direction);            
    }
    else // we are entering the dieletric medium
    {
        refracted_dir = refract(i, n, 1.0/refraction_index);
        //isRefracted = Refract(i, n, 1.0, refraction_index, refracted_dir);
        cosine = -(idotn) / length(ray.direction);
    }

    if (length(refracted_dir) != 0.0)
    //if (isRefracted == true)
    {
        reflectionProbability = Schlick(cosine, refraction_index);
        //scatter = Ray(hitRecord.hitPoint, refracted_dir);
    }
    else
    {
        reflectionProbability = 1.0;
        //scatter = Ray(hitRecord.hitPoint, reflect(ray.direction, hitRecord.normal));
    }

    vec3 randVal = random_in_unit_sphere(xy, length(g_rand) * 5466.0);
    if (length(randVal) < reflectionProbability)
    {
        scatter = Ray(hitRecord.hitPoint, reflect(ray.direction, hitRecord.normal));
    }
    else
    {
        scatter = Ray(hitRecord.hitPoint, refracted_dir);
    }
}

void Metal_Scatter(in uvec2 xy, in float roughness, in Ray ray, in HitRecord hitRecord, out Ray scatter)
{
     //attenuation = m_f3Albedo;
     vec3 reflectionDir = reflect(ray.direction, hitRecord.normal) 
                            + random_in_unit_sphere(xy, g_rand.x * 456.0) * roughness;
     scatter = Ray(hitRecord.hitPoint, reflectionDir);
}

void Lambertian_Scatter(in int bounce, in uvec2 xy, in Ray ray, in HitRecord hitRecord, out Ray scatter)
{
   
    // Rc is Center of the unit sphere created at Hitpoint
    vec3 Rc = hitRecord.hitPoint + hitRecord.normal;
    // Rp is the Random point within the unit sphere with Center Rc
    //vec4 randomPoint = randomHemispherePoint(hitRecord.normal, random.xy);
    //vec2 val = sqrt(randomPoint.xy * randomPoint.xy);
    vec3 Rp = Rc + random_in_unit_sphere(xy, bounce);
    // Created a ray with origin at hit point direction towards Rp 
    // as a way to emulate a diffuse surface and initate Ray Tracing there

    scatter = Ray(hitRecord.hitPoint, Rp - hitRecord.hitPoint);
}

int HitScene(inout Ray ray, inout HitRecord hitRecord)
{
    int anyHit = 0;
    {
        for(int i = 0; i < SPHERE_COUNT; i++)
        {        
            float tMax = hitRecord.rayLength;
            anyHit = anyHit | RaySphereHit(sphereArray[i], ray, 0.0001f, tMax, hitRecord);
        }
    }
    return anyHit;
}

vec3 Color(in uvec2 XY, in Ray in_ray, in HitRecord hitRecord)
{
    Ray ray = in_ray;
    
    vec3 attn = vec3(1.0, 1.0, 1.0);
    for(int b = 0 ; b < RAY_BOUNCE; b++)
    {
        // restting max ray length for each bounce
        hitRecord.rayLength = 1000.0;
        int anyHit = HitScene(ray, hitRecord);
        if(anyHit == 1)
        {
            Ray scatter;
            
            if(hitRecord.mat_type == MAT_LAMBERT)
            {
                Lambertian_Scatter(b, XY , ray, hitRecord, scatter);
                attn = attn * lambertMatArray[hitRecord.mat_index].albedo;
            }
            else if(hitRecord.mat_type == MAT_METAL)
            {
                Metal_Scatter(XY, metalMatArray[hitRecord.mat_index].roughness, ray, hitRecord, scatter);
                attn = attn * metalMatArray[hitRecord.mat_index].albedo;
            }
            else if(hitRecord.mat_type == MAT_DIELECTRIC)
            {
                Dielectric_scatter(XY, dielectricMatArray[hitRecord.mat_index].refractiveIndex, ray, hitRecord, scatter);
            }
    
            ray.origin = scatter.origin;
            ray.direction = scatter.direction;
        }
        else
        {
            return attn * SampleSky(ray);
        }
    }
    
    return attn * SampleSky(ray);
}

layout (local_size_x = 8, local_size_y = 8) in;
void main()
{
	if(gl_GlobalInvocationID.x >= g_RenderDim_x || gl_GlobalInvocationID.y >= g_RenderDim_y)
	{
		return;
	}
    
    uvec2 pixel_xy = gl_GlobalInvocationID.xy;    
    vec3 finalColor = vec3(0.0, 0.0, 0.0);
    
    for(int spp = 0; spp < RAY_SAMPLES_PER_PIXEL; spp++)
    {
        HitRecord hitRecord;        
        g_rand = random3(vec3(pixel_xy + ivec2( 233.0 * spp), g_Info.elapsedTime));
        
        vec2 uv = XYtoUV(vec2(pixel_xy.x + g_rand.x, pixel_xy.y + g_rand.y));
        Ray primary;
        primary = GetPrimaryRay(uv);

        finalColor = finalColor + Color(pixel_xy, primary, hitRecord);
    }
    
    finalColor = finalColor / RAY_SAMPLES_PER_PIXEL;

    vec3 gammaCorrected =  vec3( sqrt(finalColor.x), sqrt(finalColor.y) , sqrt(finalColor.z));

	imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), vec4(gammaCorrected, 0.0));
}
