#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_GOOGLE_include_directive : enable

#include "Common.h"

vec3 Resolve(ivec2 xy)
{
    // sample pixel color from current color buffer
    vec3 curColor = imageLoad(g_RT_StorageImages[STORE_PRIMARY_COLOR], xy).xyz;

    // sample pixel color from previous color buffer

    // linear interpolate between current and previous colors based on a weight
    // tutorial hard-codes this to 0.1, but I ll pass this as TAA_Resolve_Weight
    return curColor;
}

layout (local_size_x = THREAD_GROUP_SIZE_X, local_size_y = THREAD_GROUP_SIZE_Y) in;
void main()
{
    // calculating the UV for this thread
    // might not be needed for now
    //vec2 uv = vec2(gl_GlobalInvocationID.x/DISPLAY_RESOLUTION_X, gl_GlobalInvocationID.y/DISPLAY_RESOLUTION_Y);

    vec3 finalColor = Resolve(ivec2(gl_GlobalInvocationID.xy));

    // for now, we ll write back the color to the current color buffer we are sampling from
    // chances are we might want to write to other buffer incase we are performing
    // any neighbor sampling. 
    imageStore(g_RT_StorageImages[STORE_PRIMARY_COLOR], ivec2(gl_GlobalInvocationID.xy), vec4(finalColor, 1.0));
}

